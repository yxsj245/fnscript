name: pack-specific-scripts

on:
  workflow_dispatch:  # 允许手动触发工作流

# 在这里定义要打包的脚本列表
env:
  # 要打包的脚本列表，用空格分隔
  SCRIPTS_TO_BUILD: "filestorage.py"
  OUTPUT_DIR: packed_specific_tools # 定义输出目录名

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    # 签出代码
    - uses: actions/checkout@v4
    
    - name: 设置Docker
      run: |
        # 使用支持Python 3.12的基础镜像
        docker pull python:3.12-slim
        # 创建并启动容器
        docker run -d --name builder -v $PWD:/app python:3.12-slim tail -f /dev/null
    
    - name: 安装依赖
      run: |
        docker exec builder bash -c "cd /app && \
          apt-get update && \
          apt-get install -y zip binutils && \
          python -m pip install --upgrade pip && \
          python -m pip install pyinstaller==5.13.2 && \
          python -m pip install textual==3.2.0 psutil"
    
    - name: 准备要打包的脚本列表
      run: |
        # 使用预定义的脚本列表
        > /tmp/specific_scripts.txt
        for script in ${{ env.SCRIPTS_TO_BUILD }}; do
          # 检查脚本是否存在于script目录中
          if [ -f "script/$script" ]; then
            echo "script/$script" >> /tmp/specific_scripts.txt
            echo "添加脚本: script/$script"
          elif [ -f "$script" ]; then
            echo "$script" >> /tmp/specific_scripts.txt
            echo "添加脚本: $script"
          else
            echo "警告: 脚本 '$script' 不存在于 'script/' 目录或根目录，将被跳过"
          fi
        done
        
        # 显示最终要打包的脚本列表
        echo "将打包以下脚本:"
        cat /tmp/specific_scripts.txt
        
        # 复制到容器内
        docker cp /tmp/specific_scripts.txt builder:/app/scripts_to_build.txt
    
    - name: 创建输出目录
      run: |
        docker exec builder bash -c "cd /app && mkdir -p ${{ env.OUTPUT_DIR }}"
    
    - name: 打包选定的Python脚本
      run: |
        docker exec builder bash -c "cd /app && \
          while IFS= read -r script; do \
            script_name=\$(basename \"\$script\" .py); \
            echo \"正在打包: \$script_name\"; \
            python -m PyInstaller -F \"\$script\" \
              --name \"\$script_name\" \
              --clean \
              --runtime-tmpdir /tmp \
              --distpath \"/app/${{ env.OUTPUT_DIR }}\"; \
          done < /app/scripts_to_build.txt"
    
    - name: 检查打包结果
      run: |
        ls -la ${{ env.OUTPUT_DIR }}
        # 创建ZIP文件
        zip -r specific_tools.zip ${{ env.OUTPUT_DIR }}
        ls -la specific_tools.zip
    
    - name: 上传ZIP文件
      uses: actions/upload-artifact@v4
      with:
        name: specific_tools
        path: specific_tools.zip
    
    - name: 上传单个可执行文件
      uses: actions/upload-artifact@v4
      with:
        name: individual_specific_tools
        path: ${{ env.OUTPUT_DIR }}/* 
